{"version":3,"sources":["lib/resourceSlice.js","lib/gameSlice.js","assets/orbital.svg","Header.js","TestResource.js","MainPage.js","App.js","hooks/useHeartbeat.js","lib/store.js","index.js"],"names":["counterSlice","createSlice","name","initialState","dummyResource","amount","rate","reducers","updateAllResources","state","action","Object","entries","forEach","resource","data","payload","setResourceRate","actions","gameSlice","debug","paused","fps","pause","unpause","setFPS","setHeartbeat","Header","dispatch","useDispatch","useSelector","s","game","className","src","orbit","alt","onClick","TestResource","resources","toFixed","App","ms","Number","MAX_VALUE","savedCallback","useRef","useEffect","id","setInterval","current","clearInterval","useHeartbeat","MainPage","store","configureStore","reducer","resourceSlice","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wKAQaA,EAAeC,YAAY,CACtCC,KAAM,YACNC,aATmB,CACnBC,cAAe,CACbC,OAAQ,EACRC,KAAM,IAORC,SAAU,CACRC,mBAAoB,SAACC,EAAOC,GAC1BC,OAAOC,QAAQH,GAAOI,SAAQ,YAAuB,IAAD,mBAApBC,EAAoB,KAAVC,EAAU,KAClDN,EAAMK,GAAUT,QAAWU,EAAKT,KAAOI,EAAOM,QAAW,QAG7DC,gBAAiB,SAACR,EAAOC,GAAY,IAAD,EACPA,EAAOM,QAA1BF,EAD0B,EAC1BA,SAAUR,EADgB,EAChBA,KAClBG,EAAMK,GAAUR,KAAOA,M,EAK0BN,EAAakB,QAArDV,E,EAAAA,mBAAoBS,E,EAAAA,gBACpBjB,IAAf,QCvBA,IAMamB,EAAYlB,YAAY,CACnCC,KAAM,OACNC,aARmB,CACnBiB,OAAO,EACPC,QAAQ,EACRC,IAAK,GAMLf,SAAU,CACRgB,MAAO,SAACd,GACNA,EAAMY,QAAS,GAEjBG,QAAS,SAACf,GACRA,EAAMY,QAAS,GAEjBD,MAAO,SAACX,EAAOC,GACbD,EAAMW,MAAQV,EAAOM,SAEvBS,OAAQ,SAAChB,EAAOC,GACdD,EAAMa,IAAMZ,EAAOM,Y,EAKsCG,EAAUD,QAA1DK,E,EAAAA,MAAOC,E,EAAAA,QACPL,G,EADgBC,M,EAAOM,a,EAAcD,OACrCN,EAAf,SC5Be,MAA0B,oC,OCI1B,SAASQ,IACtB,IAAMC,EAAWC,cACXR,EAASS,aAAY,SAACC,GAAD,OAAOA,EAAEC,KAAKX,UAEzC,OACE,gCACE,wCACA,qBACEY,UAAWZ,EAAS,QAAU,aAC9Ba,IAAKC,EACLC,IAAI,aACJC,QAAShB,EAAS,kBAAMO,EAASJ,MAAa,kBAAMI,EAASL,WCZtD,SAASe,IACtB,IAAMV,EAAWC,cACXzB,EAAgB0B,aAAY,SAACC,GAAD,OAAOA,EAAEQ,UAAUnC,iBAWrD,OACE,gCACE,kDACkBA,EAAcC,OAAOmC,QAAQ,GAD/C,KAEGpC,EAAcE,KAAKkC,QAAQ,GAF9B,WAIA,wBAAQH,QAfZ,WACET,EACEX,EAAgB,CACdH,SAAU,gBACVR,KAAMF,EAAcE,KAAO,MAW7B,uBCTSmC,MATf,WACE,OACE,sBAAKR,UAAU,YAAf,UACE,cAACN,EAAD,IACA,cAACW,EAAD,QCESG,MANf,WAGE,OCHK,WACL,IAAMb,EAAWC,cACXR,EAASS,aAAY,SAAAC,GAAC,OAAIA,EAAEC,KAAKX,UACjCC,EAAMQ,aAAY,SAAAC,GAAC,OAAIA,EAAEC,KAAKV,OAC9BoB,EAAKpB,EAAM,EAAI,IAAKA,EAAMqB,OAAOC,UACjCC,EAAgBC,kBAAO,kBAAMlB,EAASpB,EAAmBkC,OAE/DK,qBAAU,WAIR,GAAIzB,EAAM,IAAMD,EAAQ,CACtB,IAAI2B,EAAKC,aAJX,WACEJ,EAAcK,QAAQR,KAGKA,GAC3B,OAAO,kBAAMS,cAAcH,OAE5B,CAAC1B,EAAKoB,EAAIrB,IDdb+B,GAEO,cAACC,EAAD,KEHIC,EAAQC,YAAe,CAClCC,QAAS,CACPjB,UAAWkB,EACXzB,KAAMb,KCDVuC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJO,SAASC,eAAe,U","file":"static/js/main.c90c7c8d.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  dummyResource: {\n    amount: 0,\n    rate: 1,\n  },\n};\n\nexport const counterSlice = createSlice({\n  name: 'resources',\n  initialState,\n  reducers: {\n    updateAllResources: (state, action) => {\n      Object.entries(state).forEach(([resource, data]) => {\n        state[resource].amount += (data.rate * action.payload) / 1000;\n      });\n    },\n    setResourceRate: (state, action) => {\n      const { resource, rate } = action.payload;\n      state[resource].rate = rate;\n    },\n  },\n});\n\nexport const { updateAllResources, setResourceRate } = counterSlice.actions;\nexport default counterSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  debug: false,\n  paused: false,\n  fps: 5,\n};\n\nexport const gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    pause: (state) => {\n      state.paused = true;\n    },\n    unpause: (state) => {\n      state.paused = false;\n    },\n    debug: (state, action) => {\n      state.debug = action.payload;\n    },\n    setFPS: (state, action) => {\n      state.fps = action.payload\n    }\n  },\n});\n\nexport const { pause, unpause, debug, setHeartbeat, setFPS } = gameSlice.actions;\nexport default gameSlice.reducer;\n","export default __webpack_public_path__ + \"static/media/orbital.391d4365.svg\";","import { useDispatch, useSelector } from 'react-redux';\nimport { pause, unpause } from './lib/gameSlice';\nimport orbit from './assets/orbital.svg';\n\nexport default function Header() {\n  const dispatch = useDispatch();\n  const paused = useSelector((s) => s.game.paused);\n\n  return (\n    <nav>\n      <h1>minuet</h1>\n      <img\n        className={paused ? 'orbit' : 'orbit spin'}\n        src={orbit}\n        alt=\"orbit logo\"\n        onClick={paused ? () => dispatch(unpause()) : () => dispatch(pause())}\n      />\n    </nav>\n  );\n}\n","import { useDispatch, useSelector } from 'react-redux';\nimport { setResourceRate } from './lib/resourceSlice';\n\nexport default function TestResource() {\n  const dispatch = useDispatch();\n  const dummyResource = useSelector((s) => s.resources.dummyResource);\n\n  function addRate() {\n    dispatch(\n      setResourceRate({\n        resource: 'dummyResource',\n        rate: dummyResource.rate + 1,\n      })\n    );\n  }\n\n  return (\n    <div>\n      <div>\n        DummyResource: {dummyResource.amount.toFixed(2)} (\n        {dummyResource.rate.toFixed(2)}/sec)\n      </div>\n      <button onClick={addRate}>+1/sec</button>\n    </div>\n  );\n}\n","import './css/App.css';\nimport Header from './Header';\nimport TestResource from './TestResource';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Header />\n      <TestResource />\n    </div>\n  );\n}\n\nexport default App;\n","import './css/App.css';\nimport { useHeartbeat } from './hooks/useHeartbeat';\nimport MainPage from './MainPage';\n\nfunction App() {\n  useHeartbeat();\n\n  return <MainPage />;\n}\n\nexport default App;\n","import { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateAllResources } from '../lib/resourceSlice';\n\nexport function useHeartbeat() {\n  const dispatch = useDispatch();\n  const paused = useSelector(s => s.game.paused)\n  const fps = useSelector(s => s.game.fps)\n  const ms = fps > 0 ? 1000/fps : Number.MAX_VALUE;\n  const savedCallback = useRef(() => dispatch(updateAllResources(ms)));\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current(ms);\n    }\n    if (fps > 0 && !paused) {\n      let id = setInterval(tick, ms);\n      return () => clearInterval(id);\n    }\n  }, [fps, ms, paused]);\n}","import { configureStore } from '@reduxjs/toolkit';\nimport resourceSlice from './resourceSlice';\nimport gameSlice from './gameSlice';\n\nexport const store = configureStore({\n  reducer: {\n    resources: resourceSlice,\n    game: gameSlice,\n  },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { store } from './lib/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}